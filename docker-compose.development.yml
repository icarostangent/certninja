version: "3.9"

services:
  scheduler-scan:
    depends_on:
      - redis
      - db
    build:
      context: ./scheduler-scan
    environment:
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - ./scheduler-scan:/app
    restart: unless-stopped

  scheduler-cleaner:
    depends_on:
      - redis
      - db
    build:
      context: ./scheduler-cleaner
    environment:
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - ./scheduler-cleaner:/app
    restart: unless-stopped

  mailer:
    depends_on:
      - redis
    build:
      context: ./mailer
    environment:
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      TARGET_URL: ${TARGET_URL}
    volumes:
      - ./mailer:/app
    restart: unless-stopped

  scanner:
    depends_on:
      - redis
      - db
    build:
      context: ./scanner
    environment:
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - ./scanner:/app
    restart: unless-stopped

  cleaner:
    depends_on:
      - redis
      - db
    build:
      context: ./cleaner
    environment:
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - ./cleaner:/app
    restart: unless-stopped

  redis:
    image: "redis:alpine"
    volumes:
      - redis_data:/data
    expose:
        - "6379"
    restart: unless-stopped

  redis-commander:
    image: rediscommander/redis-commander:latest
    hostname: redis-commander
    environment:
    - REDIS_HOSTS=local:redis:6379
    ports:
    - "127.0.0.1:8081:8081"
    restart: unless-stopped

  db:
    image: mysql:latest
    volumes:
      - db_data:/var/lib/mysql
      - ./db/log:/var/run/mysql
      - ./db/backup:/docker-entrypoint-initdb.d
    restart: unless-stopped
    expose:
        - "3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

  django:
    build:
      context: ./django
      dockerfile: Dockerfile.development
    depends_on:
      - db
    environment:
      TARGET_URL: ${TARGET_URL}
      DB_HOST: ${DB_HOST}
      MYSQL_PORT: ${MYSQL_PORT}
      DJANGO_DATABASE: ${DJANGO_DATABASE}
      DJANGO_USER: ${DJANGO_USER}
      DJANGO_PASSWORD: ${DJANGO_PASSWORD}
    volumes:
      - ./django:/app
      - ./static:/app/static
    ports:
      - "127.0.0.1:8888:8888"
    expose:
      - "8888"
    restart: unless-stopped

  wordpress:
    depends_on:
      - db
      - redis
    build:
      context: ./wordpress
    volumes:
      - ./wordpress/wp-config.php:/var/www/html/wp-config.php
      - ./wordpress/wp-content:/var/www/html/wp-content
    expose:
      - "80"
    ports:
      - "127.0.0.1:8000:80"
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_USER: ${MYSQL_USER}
      WORDPRESS_DB_PASSWORD: ${MYSQL_PASSWORD}
      WORDPRESS_DB_NAME: ${MYSQL_DATABASE}
      WORDPRESS_DEBUG: ${WORDPRESS_DEBUG}
      DOMAIN_NAME: ${DOMAIN_NAME}
      TARGET_URL: ${TARGET_URL}
    extra_hosts:
      - ${DOMAIN_NAME}:${PUBLIC_IP}
    restart: unless-stopped

  phpmyadmin:
    depends_on:
      - db
    image: phpmyadmin/phpmyadmin
    ports:
      - "127.0.0.1:3000:80"
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
    volumes:
      - ./frontend:/usr/src/app
    expose:
      - "8080"
    environment:
      CHOKIDAR_USEPOLLING: 'true'
      domain_name: ${DOMAIN_NAME}
      TARGET_URL: ${TARGET_URL}
    restart: unless-stopped

  nginx:
    image: openresty/openresty:latest
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./wordpress/wp-content:/var/www/html/wp-content
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./static:/static
    ports:
      - "80:80"
      - "443:443"
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME}
      DOLLAR: ${DOLLAR}
    restart: unless-stopped
    command: ["/bin/sh" , "-c" , "echo hello world && envsubst < /etc/nginx/conf.d/nginx.conf.template > /etc/nginx/conf.d/nginx.conf && exec nginx -g 'daemon off;'"]

  certbot:
    image: certbot/certbot:latest
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  db_data: {}
  redis_data: {}