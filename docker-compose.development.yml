version: "3.9"

services:
  mailer:
    build:
      context: ./mailer
    environment:
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      TARGET_URL: ${TARGET_URL}
    volumes:
      - ./mailer:/app
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"
    restart: unless-stopped

  scanner:
    build:
      context: ./scanner
    environment:
      TARGET_URL: ${TARGET_URL}
      SCANNER_TOKEN: ${SCANNER_TOKEN}
    volumes:
      - ./scanner:/app
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"
    extra_hosts:
      - ${DOMAIN_NAME}:${PUBLIC_IP}
    restart: unless-stopped

  redis:
    image: "redis:alpine"
    volumes:
      - redis_data:/data
    expose:
      - "6379"
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"
    restart: unless-stopped

  redis-commander:
    depends_on:
      - redis
    image: rediscommander/redis-commander:latest
    hostname: redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "127.0.0.1:8081:8081"
    restart: unless-stopped

  db:
    image: mysql:8.2.0-oraclelinux8
    volumes:
      - db_data:/var/lib/mysql
      - ./db/backup:/docker-entrypoint-initdb.d
    restart: unless-stopped
    expose:
      - "3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"

  django:
    depends_on:
      - db
      - redis
    command: python manage.py runserver 0.0.0.0:8888
    build:
      context: ./django
      dockerfile: Dockerfile.development
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME}
      TARGET_URL: ${TARGET_URL}
      DB_HOST: ${DB_HOST}
      MYSQL_PORT: ${MYSQL_PORT}
      DJANGO_DATABASE: ${DJANGO_DATABASE}
      DJANGO_USER: ${DJANGO_USER}
      DJANGO_PASSWORD: ${DJANGO_PASSWORD}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
      REDIS_USER: ${REDIS_USER}
      REDIS_PASS: ${REDIS_PASS}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SCANNER_USER: ${SCANNER_USER}
    volumes:
      - ./django:/app
      - ./static:/app/static
    expose:
      - "8888"
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"
    restart: unless-stopped

  scheduler:
    depends_on:
      - db
      - redis
    command: sh bootstrap-scheduler.sh
    build:
      context: ./django
      dockerfile: Dockerfile.development
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME}
      TARGET_URL: ${TARGET_URL}
      DB_HOST: ${DB_HOST}
      MYSQL_PORT: ${MYSQL_PORT}
      DJANGO_DATABASE: ${DJANGO_DATABASE}
      DJANGO_USER: ${DJANGO_USER}
      DJANGO_PASSWORD: ${DJANGO_PASSWORD}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
      REDIS_USER: ${REDIS_USER}
      REDIS_PASS: ${REDIS_PASS}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
    volumes:
      - ./django:/app
      - ./static:/app/static
    expose:
      - "8888"
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"
    restart: unless-stopped

  deactivator:
    depends_on:
      - db
      - redis
    command: sh bootstrap-expire-accounts.sh
    build:
      context: ./django
      dockerfile: Dockerfile.development
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME}
      TARGET_URL: ${TARGET_URL}
      DB_HOST: ${DB_HOST}
      MYSQL_PORT: ${MYSQL_PORT}
      DJANGO_DATABASE: ${DJANGO_DATABASE}
      DJANGO_USER: ${DJANGO_USER}
      DJANGO_PASSWORD: ${DJANGO_PASSWORD}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
      REDIS_USER: ${REDIS_USER}
      REDIS_PASS: ${REDIS_PASS}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
    volumes:
      - ./django:/app
      - ./static:/app/static
    expose:
      - "8888"
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"
    restart: unless-stopped

  wordpress:
    depends_on:
      - db
    build:
      context: ./wordpress
    volumes:
      - ./wordpress/wp-config.php:/var/www/html/wp-config.php
      - ./wordpress/wp-content:/var/www/html/wp-content
    expose:
      - "80"
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_USER: ${MYSQL_USER}
      WORDPRESS_DB_PASSWORD: ${MYSQL_PASSWORD}
      WORDPRESS_DB_NAME: ${MYSQL_DATABASE}
      WORDPRESS_DEBUG: ${WORDPRESS_DEBUG}
      DOMAIN_NAME: ${DOMAIN_NAME}
      TARGET_URL: ${TARGET_URL}
    extra_hosts:
      - ${DOMAIN_NAME}:${PUBLIC_IP}
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"
    restart: unless-stopped

  phpmyadmin:
    depends_on:
      - db
    image: phpmyadmin/phpmyadmin
    ports:
      - "127.0.0.1:3000:80"
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
    volumes:
      - ./frontend:/usr/src/app
    expose:
      - "8080"
    ports:
      - "127.0.0.1:8080:8080"
    environment:
      CHOKIDAR_USEPOLLING: 'true'
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"
    restart: unless-stopped

  nginx:
    depends_on:
      - django
      - wordpress
      - frontend
    build:
      context: ./nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf:/etc/nginx/conf.d
      - ./wordpress/wp-content:/var/www/html/wp-content
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./static:/static
      - ./frontend/node_modules:/node_modules
    ports:
      - "80:80"
      - "443:443"
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME}
      DOLLAR: ${DOLLAR}
    restart: unless-stopped
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"
    command:
      [
        "/bin/sh",
        "-c",
        "echo hello world && envsubst < /etc/nginx/conf.d/certninja.conf.template > /etc/nginx/conf.d/certninja.conf && exec nginx -g 'daemon off;'"
      ]

  certbot:
    depends_on:
      - nginx
    image: certbot/certbot:latest
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  # prometheus:
  #   image: prom/prometheus:latest
  #   restart: unless-stopped
  #   volumes:
  #     - prometheus_data:/prometheus
  #     - ./prometheus/:/etc/prometheus/
  #   ports:
  #     - 127.0.0.1:9090:9090
  #   labels:
  #     logging: "promtail"
  #     logging_jobname: "containerlogs"
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--web.enable-lifecycle'

  # node-exporter:
  #   image: prom/node-exporter:latest
  #   container_name: node-exporter
  #   restart: unless-stopped
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.rootfs=/rootfs'
  #     - '--path.sysfs=/host/sys'
  #     - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
  #   expose:
  #     - 9100

  # influxdb:
  #   image: influxdb:latest
  #   ports:
  #     - 127.0.0.1:8086:8086
  #   volumes:
  #     - influxdb_data:/var/lib/influxdb
  #   environment:
  #     INFLUXDB_DB: ${INFLUXDB_NAME}
  #     INFLUXDB_ADMIN_USER: ${INFLUXDB_USER}
  #     INFLUXDB_ADMIN_PASSWORD: ${INFLUXDB_PASS}
  #   labels:
  #     logging: "promtail"
  #     logging_jobname: "containerlogs"

  # grafana:
  #   image: grafana/grafana:latest
  #   restart: unless-stopped
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./grafana/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yaml
  #   environment:
  #     GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
  #     GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
  #     GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel'
  #   ports:
  #     - 127.0.0.1:3060:3000
  #   labels:
  #     logging: "promtail"
  #     logging_jobname: "containerlogs"

  # loki:
  #   image: grafana/loki:latest
  #   ports:
  #     - 127.0.0.1:3100:3100
  #   command: -config.file=/etc/loki/local-config.yaml
  #   volumes:
  #     - ./loki:/etc/loki
  #     - loki_data:/loki
  #   labels:
  #     logging: "promtail"
  #     logging_jobname: "containerlogs"

  # promtail:
  #   image:  grafana/promtail:latest
  #   container_name: promtail
  #   volumes:
  #     - ./promtail:/etc/promtail
  #     - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   command: -config.file=/etc/promtail/docker-config.yaml
  #   depends_on:
  #     - loki
  #   labels:
  #     logging: "promtail"
  #     logging_jobname: "containerlogs"

volumes:
  db_data: {}
  redis_data: {}
  # prometheus_data: {}
  # grafana_data: {}
  # loki_data: {}
  # influxdb_data: {}
